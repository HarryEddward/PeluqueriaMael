#!/usr/bin/env python

"""
.
.
.
Python Code
.
.
.
"""

import time
import numpy as np
import pycuda.driver as cuda
from pycuda.compiler import SourceModule
import pycuda.autoinit

from tqdm import tqdm

#import Python implementation of AES
import sys, os
sys.path.append(os.path.join(os.path.dirname(os.path.abspath(__file__)), '..'))
from ref.AES_Python import AES_Python

class AESTest:
    def __init__(self):
        self.getSourceModule()

        self.sbox = np.array([
            0x63, 0x7C, 0x77, 0x7B, 0xF2, 0x6B, 0x6F, 0xC5, 0x30, 0x01, 0x67, 0x2B, 0xFE, 0xD7, 0xAB, 0x76,
    	    0xCA, 0x82, 0xC9, 0x7D, 0xFA, 0x59, 0x47, 0xF0, 0xAD, 0xD4, 0xA2, 0xAF, 0x9C, 0xA4, 0x72, 0xC0,
    	    0xB7, 0xFD, 0x93, 0x26, 0x36, 0x3F, 0xF7, 0xCC, 0x34, 0xA5, 0xE5, 0xF1, 0x71, 0xD8, 0x31, 0x15,
    	    0x04, 0xC7, 0x23, 0xC3, 0x18, 0x96, 0x05, 0x9A, 0x07, 0x12, 0x80, 0xE2, 0xEB, 0x27, 0xB2, 0x75,
    	    0x09, 0x83, 0x2C, 0x1A, 0x1B, 0x6E, 0x5A, 0xA0, 0x52, 0x3B, 0xD6, 0xB3, 0x29, 0xE3, 0x2F, 0x84,
    	    0x53, 0xD1, 0x00, 0xED, 0x20, 0xFC, 0xB1, 0x5B, 0x6A, 0xCB, 0xBE, 0x39, 0x4A, 0x4C, 0x58, 0xCF,
    	    0xD0, 0xEF, 0xAA, 0xFB, 0x43, 0x4D, 0x33, 0x85, 0x45, 0xF9, 0x02, 0x7F, 0x50, 0x3C, 0x9F, 0xA8,
    	    0x51, 0xA3, 0x40, 0x8F, 0x92, 0x9D, 0x38, 0xF5, 0xBC, 0xB6, 0xDA, 0x21, 0x10, 0xFF, 0xF3, 0xD2,
    	    0xCD, 0x0C, 0x13, 0xEC, 0x5F, 0x97, 0x44, 0x17, 0xC4, 0xA7, 0x7E, 0x3D, 0x64, 0x5D, 0x19, 0x73,
    	    0x60, 0x81, 0x4F, 0xDC, 0x22, 0x2A, 0x90, 0x88, 0x46, 0xEE, 0xB8, 0x14, 0xDE, 0x5E, 0x0B, 0xDB,
    	    0xE0, 0x32, 0x3A, 0x0A, 0x49, 0x06, 0x24, 0x5C, 0xC2, 0xD3, 0xAC, 0x62, 0x91, 0x95, 0xE4, 0x79,
    	    0xE7, 0xC8, 0x37, 0x6D, 0x8D, 0xD5, 0x4E, 0xA9, 0x6C, 0x56, 0xF4, 0xEA, 0x65, 0x7A, 0xAE, 0x08,
    	    0xBA, 0x78, 0x25, 0x2E, 0x1C, 0xA6, 0xB4, 0xC6, 0xE8, 0xDD, 0x74, 0x1F, 0x4B, 0xBD, 0x8B, 0x8A,
    	    0x70, 0x3E, 0xB5, 0x66, 0x48, 0x03, 0xF6, 0x0E, 0x61, 0x35, 0x57, 0xB9, 0x86, 0xC1, 0x1D, 0x9E,
    	    0xE1, 0xF8, 0x98, 0x11, 0x69, 0xD9, 0x8E, 0x94, 0x9B, 0x1E, 0x87, 0xE9, 0xCE, 0x55, 0x28, 0xDF,
    	    0x8C, 0xA1, 0x89, 0x0D, 0xBF, 0xE6, 0x42, 0x68, 0x41, 0x99, 0x2D, 0x0F, 0xB0, 0x54, 0xBB, 0x16
        ], dtype=np.byte)

        self.rcon = np.array([
            0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a,
    	    0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39,
    	    0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a,
    	    0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8,
    	    0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef,
    	    0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc,
        	0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b,
        	0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3,
        	0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94,
        	0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20,
        	0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35,
        	0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f,
        	0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04,
        	0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63,
        	0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd,
        	0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d
        ], dtype=np.byte)

        self.mul2 = np.array([
            0x00, 0x02, 0x04, 0x06, 0x08, 0x0a, 0x0c, 0x0e, 0x10, 0x12, 0x14, 0x16, 0x18, 0x1a, 0x1c, 0x1e,
        	0x20, 0x22, 0x24, 0x26, 0x28, 0x2a, 0x2c, 0x2e, 0x30, 0x32, 0x34, 0x36, 0x38, 0x3a, 0x3c, 0x3e,
        	0x40, 0x42, 0x44, 0x46, 0x48, 0x4a, 0x4c, 0x4e, 0x50, 0x52, 0x54, 0x56, 0x58, 0x5a, 0x5c, 0x5e,
        	0x60, 0x62, 0x64, 0x66, 0x68, 0x6a, 0x6c, 0x6e, 0x70, 0x72, 0x74, 0x76, 0x78, 0x7a, 0x7c, 0x7e,
        	0x80, 0x82, 0x84, 0x86, 0x88, 0x8a, 0x8c, 0x8e, 0x90, 0x92, 0x94, 0x96, 0x98, 0x9a, 0x9c, 0x9e,
        	0xa0, 0xa2, 0xa4, 0xa6, 0xa8, 0xaa, 0xac, 0xae, 0xb0, 0xb2, 0xb4, 0xb6, 0xb8, 0xba, 0xbc, 0xbe,
        	0xc0, 0xc2, 0xc4, 0xc6, 0xc8, 0xca, 0xcc, 0xce, 0xd0, 0xd2, 0xd4, 0xd6, 0xd8, 0xda, 0xdc, 0xde,
        	0xe0, 0xe2, 0xe4, 0xe6, 0xe8, 0xea, 0xec, 0xee, 0xf0, 0xf2, 0xf4, 0xf6, 0xf8, 0xfa, 0xfc, 0xfe,
        	0x1b, 0x19, 0x1f, 0x1d, 0x13, 0x11, 0x17, 0x15, 0x0b, 0x09, 0x0f, 0x0d, 0x03, 0x01, 0x07, 0x05,
        	0x3b, 0x39, 0x3f, 0x3d, 0x33, 0x31, 0x37, 0x35, 0x2b, 0x29, 0x2f, 0x2d, 0x23, 0x21, 0x27, 0x25,
        	0x5b, 0x59, 0x5f, 0x5d, 0x53, 0x51, 0x57, 0x55, 0x4b, 0x49, 0x4f, 0x4d, 0x43, 0x41, 0x47, 0x45,
        	0x7b, 0x79, 0x7f, 0x7d, 0x73, 0x71, 0x77, 0x75, 0x6b, 0x69, 0x6f, 0x6d, 0x63, 0x61, 0x67, 0x65,
        	0x9b, 0x99, 0x9f, 0x9d, 0x93, 0x91, 0x97, 0x95, 0x8b, 0x89, 0x8f, 0x8d, 0x83, 0x81, 0x87, 0x85,
        	0xbb, 0xb9, 0xbf, 0xbd, 0xb3, 0xb1, 0xb7, 0xb5, 0xab, 0xa9, 0xaf, 0xad, 0xa3, 0xa1, 0xa7, 0xa5,
        	0xdb, 0xd9, 0xdf, 0xdd, 0xd3, 0xd1, 0xd7, 0xd5, 0xcb, 0xc9, 0xcf, 0xcd, 0xc3, 0xc1, 0xc7, 0xc5,
        	0xfb, 0xf9, 0xff, 0xfd, 0xf3, 0xf1, 0xf7, 0xf5, 0xeb, 0xe9, 0xef, 0xed, 0xe3, 0xe1, 0xe7, 0xe5
        ], dtype=np.byte)

        self.mul3 = np.array([
            0x00, 0x03, 0x06, 0x05, 0x0c, 0x0f, 0x0a, 0x09, 0x18, 0x1b, 0x1e, 0x1d, 0x14, 0x17, 0x12, 0x11,
        	0x30, 0x33, 0x36, 0x35, 0x3c, 0x3f, 0x3a, 0x39, 0x28, 0x2b, 0x2e, 0x2d, 0x24, 0x27, 0x22, 0x21,
        	0x60, 0x63, 0x66, 0x65, 0x6c, 0x6f, 0x6a, 0x69, 0x78, 0x7b, 0x7e, 0x7d, 0x74, 0x77, 0x72, 0x71,
        	0x50, 0x53, 0x56, 0x55, 0x5c, 0x5f, 0x5a, 0x59, 0x48, 0x4b, 0x4e, 0x4d, 0x44, 0x47, 0x42, 0x41,
        	0xc0, 0xc3, 0xc6, 0xc5, 0xcc, 0xcf, 0xca, 0xc9, 0xd8, 0xdb, 0xde, 0xdd, 0xd4, 0xd7, 0xd2, 0xd1,
        	0xf0, 0xf3, 0xf6, 0xf5, 0xfc, 0xff, 0xfa, 0xf9, 0xe8, 0xeb, 0xee, 0xed, 0xe4, 0xe7, 0xe2, 0xe1,
        	0xa0, 0xa3, 0xa6, 0xa5, 0xac, 0xaf, 0xaa, 0xa9, 0xb8, 0xbb, 0xbe, 0xbd, 0xb4, 0xb7, 0xb2, 0xb1,
        	0x90, 0x93, 0x96, 0x95, 0x9c, 0x9f, 0x9a, 0x99, 0x88, 0x8b, 0x8e, 0x8d, 0x84, 0x87, 0x82, 0x81,
        	0x9b, 0x98, 0x9d, 0x9e, 0x97, 0x94, 0x91, 0x92, 0x83, 0x80, 0x85, 0x86, 0x8f, 0x8c, 0x89, 0x8a,
        	0xab, 0xa8, 0xad, 0xae, 0xa7, 0xa4, 0xa1, 0xa2, 0xb3, 0xb0, 0xb5, 0xb6, 0xbf, 0xbc, 0xb9, 0xba,
        	0xfb, 0xf8, 0xfd, 0xfe, 0xf7, 0xf4, 0xf1, 0xf2, 0xe3, 0xe0, 0xe5, 0xe6, 0xef, 0xec, 0xe9, 0xea,
        	0xcb, 0xc8, 0xcd, 0xce, 0xc7, 0xc4, 0xc1, 0xc2, 0xd3, 0xd0, 0xd5, 0xd6, 0xdf, 0xdc, 0xd9, 0xda,
        	0x5b, 0x58, 0x5d, 0x5e, 0x57, 0x54, 0x51, 0x52, 0x43, 0x40, 0x45, 0x46, 0x4f, 0x4c, 0x49, 0x4a,
        	0x6b, 0x68, 0x6d, 0x6e, 0x67, 0x64, 0x61, 0x62, 0x73, 0x70, 0x75, 0x76, 0x7f, 0x7c, 0x79, 0x7a,
        	0x3b, 0x38, 0x3d, 0x3e, 0x37, 0x34, 0x31, 0x32, 0x23, 0x20, 0x25, 0x26, 0x2f, 0x2c, 0x29, 0x2a,
        	0x0b, 0x08, 0x0d, 0x0e, 0x07, 0x04, 0x01, 0x02, 0x13, 0x10, 0x15, 0x16, 0x1f, 0x1c, 0x19, 0x1a
        ], dtype=np.byte)

    def getSourceModule(self):
        naive = """
        #define AES_NAIVE
        """
        shared = """
        #define AES_SHARED
        """
        shared_coalesced = """
        #define AES_SHARED_COALESCED
        """

        shared_coalesced_noconst = """
        #define AES_SHARED_COALESCED_NOCONST
        #define LUT_IN_SHARED
        """

        private = """
        #define AES_PRIVATESTATE
        """

        private_sharedlut = """
        #define AES_PRIVATESTATE_SHAREDLUT
        #define LUT_IN_SHARED
        """

        file = open("../kernels/general.cuh", "r")
        kernelwrapper = file.read()
        file.close()
        file = open("../kernels/SubBytes.cuh", "r")
        kernelwrapper += file.read()
        file.close()
        file = open("../kernels/ShiftRows.cuh", "r")
        kernelwrapper += file.read()
        file.close()
        file = open("../kernels/MixColumns.cuh", "r")
        kernelwrapper += file.read()
        file.close()
        file = open("../kernels/AddRoundKey.cuh", "r")
        kernelwrapper += file.read()
        file.close()
        file = open("../kernels/Round.cuh", "r")
        kernelwrapper += file.read()
        file.close()
        file = open("../kernels/KeyExpansion.cuh", "r")
        kernelwrapper += file.read()
        file.close()
        file = open("../kernels/FinalRound.cuh", "r")
        kernelwrapper += file.read()
        file.close()
        file = open("../kernels/AES.cuh", "r")
        kernelwrapper += file.read()
        file.close()

        self.module_naive = SourceModule(naive + kernelwrapper)
        self.module_shared = SourceModule(shared + kernelwrapper)
        self.module_shared_coalesced = SourceModule(shared_coalesced + kernelwrapper)
        self.module_shared_coalesced_noconst = SourceModule(shared_coalesced_noconst + kernelwrapper)
        self.module_private = SourceModule(private + kernelwrapper)
        self.module_private_sharedlut = SourceModule(private_sharedlut + kernelwrapper)

    def AES_gpu(self, state, cipherkey, statelength, type, block_size=None):
        # Event objects to mark the start and end points
        start = cuda.Event()
        end = cuda.Event()

        # Start recording execution time
        start.record()

        # Pad the message so its length is a multiple of 16 bytes
        if (statelength % 16 != 0):
            padding = np.zeros(16 - statelength % 16, state.dtype)
            state = np.append(state, padding)
            statelength += 16 - statelength % 16

        # Device memory allocation for input and output arrays
        io_state_gpu = cuda.mem_alloc_like(state)
        i_cipherkey_gpu = cuda.mem_alloc_like(cipherkey)
        if type == "naive":
            i_rcon_gpu = self.module_naive.get_global('rcon')[0]
            i_sbox_gpu = self.module_naive.get_global('sbox')[0]
            i_mul2_gpu = self.module_naive.get_global('mul2')[0]
            i_mul3_gpu = self.module_naive.get_global('mul3')[0]
        elif type == "shared":
            i_rcon_gpu = self.module_shared.get_global('rcon')[0]
            i_sbox_gpu = self.module_shared.get_global('sbox')[0]
            i_mul2_gpu = self.module_shared.get_global('mul2')[0]
            i_mul3_gpu = self.module_shared.get_global('mul3')[0]
        elif type == "shared_coalesced":
            i_rcon_gpu = self.module_shared_coalesced.get_global('rcon')[0]
            i_sbox_gpu = self.module_shared_coalesced.get_global('sbox')[0]
            i_mul2_gpu = self.module_shared_coalesced.get_global('mul2')[0]
            i_mul3_gpu = self.module_shared_coalesced.get_global('mul3')[0]
        elif type == "private":
            i_rcon_gpu = self.module_private.get_global('rcon')[0]
            i_sbox_gpu = self.module_private.get_global('sbox')[0]
            i_mul2_gpu = self.module_private.get_global('mul2')[0]
            i_mul3_gpu = self.module_private.get_global('mul3')[0]
        else: # private_sharedlut and shared coalesced noconst
            i_rcon_gpu = cuda.mem_alloc_like(self.rcon)
            i_sbox_gpu = cuda.mem_alloc_like(self.sbox)
            i_mul2_gpu = cuda.mem_alloc_like(self.mul2)
            i_mul3_gpu = cuda.mem_alloc_like(self.mul3)

        # Copy data from host to device
        cuda.memcpy_htod(io_state_gpu, state)
        cuda.memcpy_htod(i_cipherkey_gpu, cipherkey)
        cuda.memcpy_htod(i_rcon_gpu, self.rcon)
        cuda.memcpy_htod(i_sbox_gpu, self.sbox)
        cuda.memcpy_htod(i_mul2_gpu, self.mul2)
        cuda.memcpy_htod(i_mul3_gpu, self.mul3)

        # Call the kernel function from the compiled module
        if type == "naive":
            prg = self.module_naive.get_function("AES_naive")
        elif type == "shared":
            prg = self.module_shared.get_function("AES_shared")
        elif type == "shared_coalesced":
            prg = self.module_shared_coalesced.get_function("AES_shared_coalesced")
        elif type == "private":
            prg = self.module_private.get_function("AES_private")
        elif type == "private_sharedlut":
            prg = self.module_private_sharedlut.get_function("AES_private_sharedlut")
        elif type == "shared_coalesced_noconst":
            prg = self.module_shared_coalesced_noconst.get_function("AES_shared_coalesced_noconst")
        else:
            raise Exception("Type not found!")

        # Calculate block size and grid size
        if block_size is None:
            block_size = (statelength - 1) // 16 + 1
            grid_size = 1
            if (block_size > 1024):
                block_size = 1024
                grid_size = (statelength - 1) // (1024 * 16) + 1
        else:
            grid_size = (statelength - 1) // (block_size * 16) + 1

        blockDim = (block_size, 1, 1)
        gridDim = (grid_size, 1, 1)

        # Call the kernel loaded to the device
        if type != "shared_coalesced_noconst" and type != "private_sharedlut":
            prg(io_state_gpu, i_cipherkey_gpu, np.uint32(statelength), block=blockDim, grid=gridDim)
        else:
            prg(io_state_gpu, i_cipherkey_gpu, np.uint32(statelength), i_rcon_gpu, i_sbox_gpu, i_mul2_gpu, i_mul3_gpu, block=blockDim, grid=gridDim)

        # Copy result from device to the host
        res = np.empty_like(state)
        cuda.memcpy_dtoh(res, io_state_gpu)

        # Record execution time (including memory transfers)
        end.record()
        end.synchronize()

        # return a tuple of output of sine computation and time taken to execute the operation (in ms).
        return res, start.time_till(end) * 10 ** (-3)

# Test functionality on a single block
def test1_RoundTest():
    # Input array
    hex_in = "00112233445566778899aabbccddeeff"
    byte_in = bytes.fromhex(hex_in)
    byte_array_in = np.frombuffer(byte_in, dtype=np.byte)

    hex_key = "000102030405060708090a0b0c0d0e0f"
    byte_key = bytes.fromhex(hex_key)
    byte_array_key = np.frombuffer(byte_key, dtype=np.byte)

    # Reference output
    hex_ref  = "69c4e0d86a7b0430d8cdb78070b4c55a"
    byte_ref = bytes.fromhex(hex_ref)
    byte_array_ref = np.frombuffer(byte_ref, dtype=np.byte)

    graphicscomputer = AESTest()
    result_gpu_naive = graphicscomputer.AES_gpu(byte_array_in, byte_array_key, 16, "naive")[0]
    assert np.array_equal(result_gpu_naive, byte_array_ref)
    result_gpu_shared = graphicscomputer.AES_gpu(byte_array_in, byte_array_key, 16, "shared")[0]
    assert np.array_equal(result_gpu_shared, byte_array_ref)
    result_gpu_shared_coalesced = graphicscomputer.AES_gpu(byte_array_in, byte_array_key, 16, "shared_coalesced")[0]
    assert np.array_equal(result_gpu_shared_coalesced, byte_array_ref)
    result_gpu_shared_coalesced_noconst = graphicscomputer.AES_gpu(byte_array_in, byte_array_key, 16, "shared_coalesced_noconst")[0]
    assert np.array_equal(result_gpu_shared_coalesced_noconst, byte_array_ref)
    result_gpu_private = graphicscomputer.AES_gpu(byte_array_in, byte_array_key, 16, "private")[0]
    assert np.array_equal(result_gpu_private, byte_array_ref)
    result_gpu_private_sharedlut = graphicscomputer.AES_gpu(byte_array_in, byte_array_key, 16, "private_sharedlut")[0]
    assert np.array_equal(result_gpu_private_sharedlut, byte_array_ref)

# Test functionality on two blocks
def test2_RoundTest():
    # Input array
    hex_in = "00112233445566778899aabbccddeeff00112233445566778899aabbccddeeff"
    byte_in = bytes.fromhex(hex_in)
    byte_array_in = np.frombuffer(byte_in, dtype=np.byte)

    hex_key = "000102030405060708090a0b0c0d0e0f"
    byte_key = bytes.fromhex(hex_key)
    byte_array_key = np.frombuffer(byte_key, dtype=np.byte)

    # Reference output
    hex_ref  = "69c4e0d86a7b0430d8cdb78070b4c55a69c4e0d86a7b0430d8cdb78070b4c55a"
    byte_ref = bytes.fromhex(hex_ref)
    byte_array_ref = np.frombuffer(byte_ref, dtype=np.byte)

    graphicscomputer = AESTest()
    result_gpu_naive = graphicscomputer.AES_gpu(byte_array_in, byte_array_key, 32, "naive")[0]
    assert np.array_equal(result_gpu_naive, byte_array_ref)
    result_gpu_shared = graphicscomputer.AES_gpu(byte_array_in, byte_array_key, 32, "shared")[0]
    assert np.array_equal(result_gpu_shared, byte_array_ref)
    result_gpu_shared_coalesced = graphicscomputer.AES_gpu(byte_array_in, byte_array_key, 32, "shared_coalesced")[0]
    assert np.array_equal(result_gpu_shared_coalesced, byte_array_ref)
    result_gpu_shared_coalesced_noconst = graphicscomputer.AES_gpu(byte_array_in, byte_array_key, 32, "shared_coalesced_noconst")[0]
    assert np.array_equal(result_gpu_shared_coalesced_noconst, byte_array_ref)
    result_gpu_private = graphicscomputer.AES_gpu(byte_array_in, byte_array_key, 32, "private")[0]
    assert np.array_equal(result_gpu_private, byte_array_ref)

# Test for a longer input message
def test3_RoundTest():
    # Input array
    hex_in = "4C6574206D65206B6E6F77206966207468697320776F726B73212076616B76616A67206A7A65206B6820666B65206B20716B20636B712063686B206B656266657A6F666B7A65626668652063676520634F4555424462686A442065666271686662716B68206B716766677165716765207A6579757971627942464B48454248626B656220716662717566626B71626B662071796B6671627162662071626675627168627A65716865626B6671626862686A7A646A2068627A65646A62656B6666"
    byte_in = bytes.fromhex(hex_in)
    byte_array_in = np.frombuffer(byte_in, dtype=np.byte)

    hex_key = "000102030405060708090a0b0c0d0e0f"
    byte_key = bytes.fromhex(hex_key)
    byte_array_key = np.frombuffer(byte_key, dtype=np.byte)

    # Reference output
    hex_ref  = "AEEFA738A84D7B13E4D890E67FD4966AC8F3D82D6976E8F98575D39CAB1752531F3378C530B3D566516A3037A8CBCDC544B7A7FE7FA3214FD26C3653FDFA8D23113958AAC29B2D4EBB00D6AC40696E0576C80B08058FEA0966331AEF3846362BEACAA9B116290A6C4E5FAF1089447E58CA379D46FB27540ECFAAD497F39131EA88C29FFD71990C2AB5C19F09926316A2D9C1BA12025029D7C17877A6B47DBC7B9EDF61391EE2C2D2D83BF0904032589FA7181C1FB773B270CAAD886F82FE8477"
    byte_ref = bytes.fromhex(hex_ref)
    byte_array_ref = np.frombuffer(byte_ref, dtype=np.byte)

    graphicscomputer = AESTest()
    result_gpu_naive = graphicscomputer.AES_gpu(byte_array_in, byte_array_key, 192, "naive")[0]
    assert np.array_equal(result_gpu_naive, byte_array_ref)
    result_gpu_shared = graphicscomputer.AES_gpu(byte_array_in, byte_array_key, 192, "shared")[0]
    assert np.array_equal(result_gpu_shared, byte_array_ref)
    result_gpu_shared_coalesced = graphicscomputer.AES_gpu(byte_array_in, byte_array_key, 192, "shared_coalesced")[0]
    assert np.array_equal(result_gpu_shared_coalesced, byte_array_ref)
    result_gpu_shared_coalesced_noconst = graphicscomputer.AES_gpu(byte_array_in, byte_array_key, 192, "shared_coalesced_noconst")[0]
    assert np.array_equal(result_gpu_shared_coalesced_noconst, byte_array_ref)
    result_gpu_private = graphicscomputer.AES_gpu(byte_array_in, byte_array_key, 192, "private")[0]
    assert np.array_equal(result_gpu_private, byte_array_ref)

# Test padding for a single block
def test4_RoundTest():
    # Input array
    hex_in = "aa"
    byte_in = bytes.fromhex(hex_in)
    byte_array_in = np.frombuffer(byte_in, dtype=np.byte)

    hex_key = "000102030405060708090a0b0c0d0e0f"
    byte_key = bytes.fromhex(hex_key)
    byte_array_key = np.frombuffer(byte_key, dtype=np.byte)

    # Reference output
    hex_ref = "0869E8818A81789A723D2616400D31A9"
    byte_ref = bytes.fromhex(hex_ref)
    byte_array_ref = np.frombuffer(byte_ref, dtype=np.byte)

    graphicscomputer = AESTest()
    result_gpu_naive = graphicscomputer.AES_gpu(byte_array_in, byte_array_key, byte_array_in.size, "naive")[0]
    assert np.array_equal(result_gpu_naive, byte_array_ref)
    result_gpu_shared = graphicscomputer.AES_gpu(byte_array_in, byte_array_key, byte_array_in.size, "shared")[0]
    assert np.array_equal(result_gpu_shared, byte_array_ref)
    result_gpu_shared_coalesced = graphicscomputer.AES_gpu(byte_array_in, byte_array_key, byte_array_in.size, "shared_coalesced")[0]
    assert np.array_equal(result_gpu_shared_coalesced, byte_array_ref)
    result_gpu_shared_coalesced_noconst = graphicscomputer.AES_gpu(byte_array_in, byte_array_key, byte_array_in.size, "shared_coalesced_noconst")[0]
    assert np.array_equal(result_gpu_shared_coalesced_noconst, byte_array_ref)
    result_gpu_private = graphicscomputer.AES_gpu(byte_array_in, byte_array_key, byte_array_in.size, "private")[0]
    assert np.array_equal(result_gpu_private, byte_array_ref)

# Test padding for a two blocks
def test5_RoundTest():
    # Input array
    hex_in = "00112233445566778899aabbccddeeff0011223344556677"
    byte_in = bytes.fromhex(hex_in)
    byte_array_in = np.frombuffer(byte_in, dtype=np.byte)

    hex_key = "000102030405060708090a0b0c0d0e0f"
    byte_key = bytes.fromhex(hex_key)
    byte_array_key = np.frombuffer(byte_key, dtype=np.byte)

    # Reference output
    hex_ref = "69C4E0D86A7B0430D8CDB78070B4C55AB61B9091935D3EE92634DCD834779663"
    byte_ref = bytes.fromhex(hex_ref)
    byte_array_ref = np.frombuffer(byte_ref, dtype=np.byte)

    graphicscomputer = AESTest()
    result_gpu_naive = graphicscomputer.AES_gpu(byte_array_in, byte_array_key, byte_array_in.size, "naive")[0]
    assert np.array_equal(result_gpu_naive, byte_array_ref)
    result_gpu_shared = graphicscomputer.AES_gpu(byte_array_in, byte_array_key, byte_array_in.size, "shared")[0]
    assert np.array_equal(result_gpu_shared, byte_array_ref)
    result_gpu_shared_coalesced = graphicscomputer.AES_gpu(byte_array_in, byte_array_key, byte_array_in.size, "shared_coalesced")[0]
    assert np.array_equal(result_gpu_shared_coalesced, byte_array_ref)
    result_gpu_shared_coalesced_noconst = graphicscomputer.AES_gpu(byte_array_in, byte_array_key, byte_array_in.size, "shared_coalesced_noconst")[0]
    assert np.array_equal(result_gpu_shared_coalesced_noconst, byte_array_ref)
    result_gpu_private = graphicscomputer.AES_gpu(byte_array_in, byte_array_key, byte_array_in.size, "private")[0]
    assert np.array_equal(result_gpu_private, byte_array_ref)

# Test for longer message, not necessarily length that is a multiple of 16 bytes
def test6_RoundTest():
    # Input array
    hex_in
    byte_in = bytes.fromhex(hex_in)
    byte_array_in = np.frombuffer(byte_in, dtype=np.byte)

    hex_key = "000102030405060708090a0b0c0d0e0f"
    byte_key = bytes.fromhex(hex_key)
    byte_array_key = np.frombuffer(byte_key, dtype=np.byte)

    # Reference output
    byte_array_ref = np.array([0x72,0x7C,0x87,0xAD,0xBD,0x1E,0x1D,0x46,0xA5,0x08,0x7C,0x8B,0x1B,0x90,0xB8,0x30,
0x95,0xC4,0xBF,0x5D,0x8A,0xC3,0x5E,0x1D,0x79,0x88,0xFE,0xFB,0x21,0xB5,0x17,0x74,
0x1D,0x95,0x1A,0x16,0x68,0x23,0x8E,0xA3,0xB7,0x0F,0x48,0x7F,0x57,0xC9,0x96,0x93,
0xC2,0x1D,0x94,0x46,0x6B,0xEC,0xA5,0xAB,0x39,0xBB,0xA5,0x56,0xF9,0xDE,0xA4,0x66,
0x91,0x77,0x32,0x97,0x54,0x3B,0x1B,0x81,0xAB,0xC2,0x10,0x81,0x58,0x4A,0xFB,0xF0,
0xB7,0xE0,0xD7,0xE6,0xBF,0xF2,0x95,0x69,0x79,0x8A,0x10,0xC3,0x4B,0xE8,0x0F,0x67,
0x50,0x98,0x96,0xEB,0x43,0xC0,0x83,0x0A,0x5B,0x5B,0x7E,0xDA,0x63,0xE0,0xC4,0x34,
0xA5,0x49,0x8F,0xD2,0xA6,0xA1,0x5F,0x47,0xAD,0x48,0x83,0xEE,0x0E,0x29,0x86,0x62,
0x64,0x39,0x98,0x3E,0x92,0xA8,0x17,0x1E,0x3E,0x9F,0xDB,0x20,0x33,0xB9,0xD6,0x8A,
0x91,0xCD,0xC6,0x97,0xC7,0x1E,0x27,0x21,0x6B,0x5C,0x6D,0x9F,0x45,0xDF,0xC7,0x40,
0xAA,0x8E,0xB7,0xE6,0x6C,0x54,0x7B,0xE3,0x9A,0x54,0x48,0xE1,0x55,0x77,0xF2,0x4B,
0x66,0x0B,0x80,0xC1,0x08,0x74,0x20,0xB9,0xE2,0x01,0x12,0x9A,0xAC,0x94,0xCC,0x33,
0x31,0xD8,0x49,0x0D,0x95,0x23,0x5E,0x58,0xBF,0x50,0xDF,0xB4,0xA5,0x49,0x79,0xE0,
0x8E,0x80,0x55,0x78,0x98,0xF6,0x96,0xBC,0x4B,0xB0,0xB4,0xBC,0xE1,0x84,0x61,0x14,
0x7A,0x2B,0xAE,0xED,0xC9,0x9D,0xAA,0x34,0xE7,0xBC,0x45,0xDB,0xA4,0xC3,0x6E,0xD1,
0x7D,0x5A,0xA3,0x5D,0xE7,0xA8,0xCD,0x4F,0xD8,0x2E,0xAF,0x5E,0x2E,0x8F,0xFA,0xFF,
0xEA,0xB7,0x07,0xD1,0x4C,0x5E,0x6A,0x7F,0x36,0x09,0x26,0xF3,0xA5,0x76,0x70,0x4E,
0x24,0x0A,0x20,0x08,0xBF,0x71,0x73,0xAF,0xF7,0xA0,0xA9,0x55,0xA3,0xF2,0x6F,0x5B,
0x13,0xA7,0x73,0xEB,0x03,0xA0,0xE2,0xD0,0xDE,0x31,0x54,0x10,0xDC,0xF4,0x4E,0x7A,
0x9F,0xE9,0x44,0xAE,0x58,0x8A,0x31,0x56,0x1D,0xE9,0xCB,0x5A,0x49,0xFF,0x5D,0x38,
0x8A,0x0B,0x8A,0x64,0x0A,0x2D,0x2A,0x93,0xC4,0x78,0xA3,0xAB,0x52,0xD8,0x9C,0xA0,
0x69,0xC0,0x66,0xB3,0xD9,0x1F,0x23,0xF8,0x88,0x95,0x34,0x69,0x5C,0x90,0x31,0x76,
0xF8,0xB1,0xC1,0x9A,0x39,0x01,0x29,0x13,0x0D,0x4D,0x6D,0xC8,0x64,0x10,0xD4,0x2D,
0x60,0xD8,0x44,0x97,0xE3,0xAF,0xF5,0x34,0x01,0xB2,0x63,0xE4,0x90,0x41,0x09,0xE1,
0xBE,0xEB,0xD6,0x18,0x49,0x0F,0xED,0x87,0xD6,0x49,0xD1,0xC8,0xBB,0x49,0x21,0x85,
0x44,0x2B,0x10,0x5E,0x69,0x65,0xA8,0x7C,0x2F,0xEE,0x47,0x45,0xE1,0xEF,0xE2,0x6A,
0x9D,0x49,0x7F,0xC3,0x75,0x3F,0x28,0x01,0xA8,0xA8,0x31,0xFD,0x3F,0x61,0xE5,0x8B,
0xC5,0x44,0x0C,0x8F,0xB6,0xF0,0x1B,0xCF,0xE8,0xA5,0xAE,0xFA,0x23,0xB9,0x69,0x02,
0xB5,0x79,0xE9,0x58,0x1A,0x7B,0xC6,0x3A,0x15,0x3C,0x6C,0xFA,0x23,0x7E,0x60,0x87,
0xFA,0x04,0x7F,0x66,0xD2,0x07,0xCC,0xFE,0x5F,0xDE,0x8E,0x37,0xA3,0xBD,0xB4,0x2D,
0xC3,0x4D,0x28,0xB9,0x29,0x5B,0xDC,0x55,0xFD,0x8E,0xE0,0xE9,0xA7,0x8A,0xEA,0x51,
0x5B,0xE8,0x4E,0xF2,0x71,0xCF,0x79,0xDD,0xF0,0x03,0xA7,0x5D,0x26,0xB6,0x9D,0x42,
0xB9,0x55,0xFC,0xCE,0xD7,0xA7,0xDF,0x16,0xEA,0x2C,0x8D,0x5C,0x7F,0x76,0x8E,0x9B,
0xA2,0x0E,0xF7,0xD6,0x68,0x99,0x8B,0x61,0x4D,0x6A,0x25,0xB8,0x8C,0x09,0x79,0x89,
0x77,0x5A,0x4F,0xB0,0x72,0xAC,0x1F,0x27,0xA2,0x5B,0xF8,0xA4,0x3D,0x56,0x22,0xA0,
0xAF,0x3D,0xA2,0xF3,0x40,0x09,0xF0,0xCA,0x0A,0x97,0xF6,0xE6,0xC1,0x67,0x3A,0xE5,
0xB6,0x63,0x8D,0x68,0x9D,0x18,0x47,0xDB,0x40,0xCB,0x44,0x0D,0x76,0x20,0xB2,0xAB,
0xCF,0xB8,0x7A,0x18,0x1A,0x9A,0xE5,0x04,0x21,0xBF,0xD2,0xA4,0x77,0x9D,0x34,0x45,
0xA9,0xB3,0x11,0x9C,0x89,0x42,0x6F,0x59,0x6E,0x94,0xFB,0xF0,0x7C,0x61,0x9F,0xFC,
0x90,0x00,0xFE,0x07,0x37,0xDC,0xB9,0x2C,0x8B,0x90,0xB9,0x2A,0xBD,0xFC,0xAC,0x32,
0xA0,0x1E,0x70,0x7A,0x44,0xE7,0x29,0x87,0x96,0x4A,0x0E,0x20,0x00,0x43,0xF4,0x3C,
0xED,0x0C,0x09,0x82,0x25,0x7F,0x5D,0x2B,0x82,0x84,0xB1,0x8D,0x9B,0xB4,0x51,0xE1,
0x21,0xB2,0xF9,0xDA,0x6A,0x68,0xED,0x8E,0xE4,0x34,0x5A,0x46,0x30,0x3F,0x6B,0x90,
0x76,0x15,0x33,0x9F,0x54,0x4E,0x7E,0x62,0xA1,0xD6,0x96,0xC8,0x7B,0xE1,0x97,0xEC,
0x96,0x66,0xF9,0x57,0xBD,0xEE,0x09,0xDE,0x26,0x69,0x74,0x0D,0x4A,0xFB,0x96,0x86,
0x02,0x56,0xFD,0x31,0xE4,0x76,0xF0,0x61,0x52,0x34,0x95,0xFD,0xAE,0x32,0x57,0xD4,
0x61,0x71,0xDE,0xD4,0xBF,0xCC,0x3E,0xE7,0x66,0x63,0x41,0x09,0x26,0x26,0x14,0x31,
0xA5,0xD9,0xDF,0x54,0x46,0xD3,0xC3,0xA3,0xF8,0x41,0xB3,0x0E,0xF5,0xDB,0xB4,0xC0,
0x2A,0x0E,0x43,0xC3,0x10,0x79,0x6A,0x71,0x2A,0x18,0x84,0xE4,0xBD,0xEF,0x96,0x7F,
0xDF,0xF3,0x38,0xBA,0x96,0xB7,0xBB,0xDE,0x06,0x16,0x08,0x0F,0xF3,0xD6,0xF9,0x91,
0xE2,0xEC,0xF1,0x9C,0xCE,0x90,0x7B,0x90,0x04,0xBE,0xE4,0x88,0xF2,0x88,0x9F,0x20,
0x25,0x20,0x0E,0xE8,0xB2,0xB8,0xCE,0xFB,0xDE,0x90,0x5E,0x1E,0x07,0x5E,0x16,0x57,
0x19,0xA8,0xF4,0x32,0xDF,0x8D,0xEA,0x7A,0xED,0x1C,0x6B,0x05,0x28,0xE6,0xBA,0xD9,
0x58,0x9C,0x74,0x4D,0xE4,0xD4,0xB5,0xF2,0x16,0x93,0xA9,0x1E,0x98,0xC9,0xAE,0x51,
0x3E,0xF4,0xFB,0xDE,0xE3,0xC2,0x38,0xB8,0x97,0xD1,0x98,0x13,0x4A,0xA3,0x80,0xAF,
0xAD,0xE3,0xF3,0x2D,0x39,0x3C,0x90,0xC8,0x83,0x56,0xD3,0x33,0x96,0x30,0xAD,0x26,
0x3D,0x09,0xA4,0x66,0x57,0xB4,0x8D,0x40,0xDF,0x37,0xC6,0xEC,0xB6,0xB6,0xEF,0xAF,
0x55,0x0F,0x2D,0xCB,0xC7,0xE9,0x9D,0xF1,0x7A,0x4E,0x31,0x9D,0xA5,0x24,0x39,0xA1,
0x87,0x09,0xFA,0xA1,0xA1,0x0C,0xA0,0x3B,0xCE,0x0F,0x09,0x96,0x11,0xEA,0xBE,0x70,
0x86,0x0B,0x0D,0x87,0xE3,0x9A,0x37,0x3D,0x4B,0x74,0x6D,0x23,0x6F,0x4C,0xB7,0x3D,
0x93,0xC2,0x8B,0xF3,0x89,0xF8,0xB2,0x0C,0x4B,0x48,0x6B,0x3F,0x55,0xF3,0x36,0x4B,
0xAD,0xA4,0x5B,0x24,0xDE,0x39,0x61,0x8B,0x2E,0x14,0xA3,0x0B,0x29,0xC6,0xF4,0x17,
0x7D,0x83,0xF2,0xD2,0xFC,0x99,0xCD,0x97,0x62,0x32,0xFC,0x97,0x59,0x0E,0xE3,0x2B,
0xD8,0x42,0x3B,0xC1,0xD2,0x52,0x49,0x6C,0xC6,0xFA,0xAF,0xA6,0xB9,0xC5,0x85,0xE3,
0x7B,0x6E,0xF1,0x54,0x4C,0x1F,0x90,0x58,0x66,0xD8,0x63,0x2D,0x62,0x23,0x75,0x07,
0x92,0xC6,0xFA,0xC9,0x21,0x38,0xE2,0x9B,0x74,0x69,0xFB,0x25,0x71,0x70,0x56,0x3C,
0x03,0xC2,0x73,0xB4,0x95,0xA4,0xEA,0x17,0x23,0xBD,0x2A,0x79,0x5D,0x51,0x88,0x74,
0x9F,0x40,0x13,0x69,0xCB,0xAA,0x2C,0x73,0x0B,0xDB,0x51,0x15,0xFF,0x4C,0xB8,0xCF,
0x49,0x97,0x5E,0x2C,0xA9,0x24,0x2F,0xE6,0x1E,0xD9,0x77,0xED,0xB5,0xAC,0xBF,0xD8,
0x03,0x3B,0xE8,0x33,0xE3,0x5C,0x02,0xE8,0xE1,0xE6,0xCA,0xF5,0x67,0xE9,0x0A,0x15,
0xB7,0x04,0x42,0x0D,0x69,0x89,0xE1,0x49,0xED,0x04,0x9B,0x30,0x37,0x95,0x68,0x1A,
0x9E,0xCB,0x8C,0x0D,0xAA,0x1C,0x11,0x7D,0x90,0x53,0x7B,0xEF,0xEF,0x84,0xF6,0x90,
0x42,0x8B,0xB5,0x85,0x02,0xDE,0xDF,0xBD,0x82,0x2C,0x6B,0xDC,0xE5,0x13,0x46,0xAC,
0xCB,0xFF,0x72,0x86,0xAE,0x05,0xCD,0x54,0xDC,0x06,0x28,0x8A,0x74,0xCE,0x82,0x85,
0x3A,0x01,0x85,0x84,0xA7,0x2C,0x08,0x4A,0x28,0x79,0x8D,0x77,0xC9,0x64,0x0C,0x95,
0x33,0x90,0x9F,0x70,0x20,0x7A,0xD1,0x4E,0xEF,0xE3,0xB6,0xB1,0x5F,0x20,0xCA,0xAE,
0x19,0x5C,0xE2,0xB0,0x48,0xBB,0xC1,0x92,0x28,0x2E,0xB8,0xF2,0x3E,0x6B,0xAC,0x49,
0x73,0x78,0x6B,0xC3,0x56,0x51,0xD3,0xD2,0xE9,0x81,0x82,0xA6,0xD2,0x84,0x53,0xDA,
0x63,0x25,0x7C,0xBE,0xDF,0x72,0xD8,0xBD,0x85,0xA4,0x43,0x58,0x5D,0x09,0x6A,0x91,
0xA9,0x3D,0xB1,0xED,0x06,0x69,0xE9,0x4C,0xE1,0xFE,0x13,0x47,0xD2,0x24,0xFE,0x1E,
0xB1,0x9A,0x01,0x52,0xD1,0x27,0x3B,0x3E,0xEC,0x12,0x0E,0x7D,0x71,0x1B,0xC6,0x2E,
0x41,0xDD,0x6B,0x5B,0x72,0x14,0x99,0x40,0x48,0xE1,0xFE,0x99,0x08,0x4D,0x9A,0xDC,
0xE9,0x1F,0x35,0x30,0x21,0x10,0xFC,0x17,0x13,0xE2,0xFD,0xF9,0xDD,0x98,0xC6,0x2C,
0xA2,0xAA,0xA9,0x6C,0xAD,0x03,0x6F,0x16,0xFE,0x3B,0x16,0x96,0xF3,0xBA,0xF2,0x2A,
0x2E,0x84,0x28,0x39,0xBD,0x3A,0x1D,0xE9,0xD8,0xA0,0x26,0xD2,0x01,0xA8,0x21,0x7B,
0xA3,0x60,0x82,0x21,0xDE,0xF7,0x1B,0x19,0x93,0xD4,0x1C,0x36,0xB6,0xC2,0x41,0xA7,
0x6C,0x02,0x16,0x9A,0x5C,0xA0,0xCA,0xD8,0x72,0x9E,0x46,0x4F,0x98,0xCD,0x1B,0x70,
0x85,0xE3,0x99,0xFA,0xFF,0x3F,0x85,0xE1,0x7E,0xF2,0xE1,0xCB,0x5C,0x4B,0xE9,0x00,
0x64,0x68,0x1D,0x90,0x8E,0xE4,0x14,0x03,0xFB,0x63,0xDF,0x8F,0x44,0x07,0x49,0x37,
0x0C,0x30,0x53,0xF5,0xA0,0xF5,0xF2,0xEA,0x69,0xE8,0xE4,0x36,0xE2,0x53,0xB1,0xEE,
0xA3,0x70,0xF6,0x66,0x25,0x7B,0x0D,0x5D,0xA3,0x51,0xFF,0x21,0x0A,0xBD,0xCF,0x17,
0x3E,0x25,0xDE,0x43,0x73,0x81,0xD7,0xBE,0xFE,0x56,0xA2,0x72,0xB1,0xA2,0x29,0xE7,
0x62,0x6F,0x01,0xE5,0x4A,0x62,0x3A,0xEE,0xDE,0x72,0xB9,0xEE,0x30,0xB1,0x3C,0x53,
0x2D,0x7B,0x64,0xD9,0xAE,0x29,0x6F,0x15,0x61,0x9E,0xE7,0x67,0x91,0xF6,0x47,0xC7,
0xAA,0x35,0x73,0x3C,0xE1,0x50,0xAB,0x4B,0xB1,0xE8,0x3C,0xDD,0x6C,0x37,0x33,0x1B,
0x45,0xEB,0x95,0xAD,0xD7,0x90,0x34,0x2C,0xBA,0x95,0xEF,0x3E,0x33,0xC4,0x98,0x71,
0x9A,0xC9,0x8D,0x58,0x84,0x99,0x5C,0x2A,0x2B,0x9E,0x3D,0x96,0x9A,0x47,0x92,0xCC,
0xB5,0xB3,0xFB,0xB7,0x43,0x47,0x96,0x53,0x78,0x82,0x0C,0xF5,0xF4,0xE4,0xAF,0xD9,
0x1F,0x06,0x1C,0xCB,0x03,0x00,0x38,0xC1,0xAC,0x47,0x6D,0x39,0xC5,0x55,0x07,0x8A,
0xB2,0x55,0xFE,0xFA,0xCD,0xEC,0x9A,0xE4,0x86,0x61,0x50,0xF9,0x33,0x49,0x47,0xBF,
0x6E,0xD7,0xE8,0xFB,0x43,0x8C,0xFA,0x96,0xD9,0x95,0x4C,0x74,0x83,0xFE,0xDD,0x2D
], dtype=np.byte)

    graphicscomputer = AESTest()
    result_gpu_naive = graphicscomputer.AES_gpu(byte_array_in, byte_array_key, byte_array_in.size, "naive")[0]
    assert np.array_equal(result_gpu_naive, byte_array_ref)
    result_gpu_shared = graphicscomputer.AES_gpu(byte_array_in, byte_array_key, byte_array_in.size, "shared")[0]
    assert np.array_equal(result_gpu_shared, byte_array_ref)
    result_gpu_shared_coalesced = graphicscomputer.AES_gpu(byte_array_in, byte_array_key, byte_array_in.size, "shared_coalesced")[0]
    assert np.array_equal(result_gpu_shared_coalesced, byte_array_ref)
    result_gpu_shared_coalesced_noconst = graphicscomputer.AES_gpu(byte_array_in, byte_array_key, byte_array_in.size, "shared_coalesced_noconst")[0]
    assert np.array_equal(result_gpu_shared_coalesced_noconst, byte_array_ref)
    result_gpu_private = graphicscomputer.AES_gpu(byte_array_in, byte_array_key, byte_array_in.size, "private")[0]
    assert np.array_equal(result_gpu_private, byte_array_ref)

# Test another longer message
def test7_RoundTest():
    # Input array
    hex_in
    byte_in = bytes.fromhex(hex_in)
    byte_array_in = np.frombuffer(byte_in, dtype=np.byte)

    hex_key = "abbacddceffe0110abbacddceffe0110"
    byte_key = bytes.fromhex(hex_key)
    byte_array_key = np.frombuffer(byte_key, dtype=np.byte)

    # Reference output
    byte_array_ref = np.array([0xBF,0x83,0xD4,0xDB,0xB1,0xCF,0xED,0x30,0xB1,0x88,0xE9,0xEB,0x19,0xF8,0x6E,0xB5,
0x44,0xDB,0x6D,0x41,0xB7,0xC5,0xC9,0x04,0xCE,0x3A,0x49,0xBB,0x3B,0xA0,0x7C,0x28,
0xF8,0x9C,0x9A,0xCE,0xBE,0x49,0x11,0x22,0x43,0x95,0xB1,0xFF,0x17,0xF0,0xF2,0x04,
0x00,0x45,0x02,0x07,0xFF,0x49,0x0E,0x72,0xFC,0x90,0x1C,0x77,0xF5,0x62,0xFA,0xB0,
0x12,0x09,0xA9,0x54,0xD7,0xBA,0x82,0xD3,0x39,0xF3,0xA6,0x2B,0xDA,0x90,0xEE,0x35,
0x0A,0xCB,0xF7,0xF3,0xA9,0x86,0xDE,0xB1,0xAE,0x78,0x13,0x19,0xE4,0x6B,0x10,0xD6,
0x8B,0x8D,0x84,0x59,0x37,0x83,0x7F,0xB0,0xF8,0x8C,0x0D,0xC4,0x48,0x4F,0x0E,0x5F,
0xC4,0x57,0x1D,0x93,0x95,0x37,0xB4,0xFA,0x91,0x99,0xF5,0x28,0xA2,0x50,0x3B,0x24,
0x3C,0xBC,0xA4,0xB7,0xC7,0x2B,0xF8,0x17,0x25,0xA0,0x82,0xBD,0x1A,0x62,0xF3,0xA8,
0x23,0x06,0x62,0xD1,0x72,0x97,0x3B,0x63,0xB7,0xE1,0x26,0xFC,0xF1,0xC4,0xDA,0x76,
0xB9,0x5B,0x42,0xDD,0xDD,0xDC,0x6E,0x5A,0x6F,0x67,0xF9,0xD2,0x88,0x76,0xF1,0x2F,
0xF8,0x4B,0x7D,0x40,0x8E,0x76,0x70,0xBF,0x9A,0x84,0x5F,0xDD,0xFC,0xB1,0xF0,0x33,
0x39,0x97,0x73,0x81,0x1F,0x1F,0x5F,0x54,0xFF,0x21,0x71,0xE4,0x56,0xC9,0xD7,0x3D,
0xE7,0x96,0xED,0xB0,0xEA,0xFD,0x1C,0x0C,0x23,0xA8,0x09,0xCD,0xD8,0x12,0x52,0x13,
0x2F,0x56,0x85,0x0E,0x4C,0x8D,0xB1,0xCE,0x63,0xF8,0x7F,0xCA,0x9D,0xD6,0x3E,0xDB,
0x6F,0x17,0x03,0xB9,0x14,0x93,0x8F,0x76,0x7B,0x37,0x8A,0x0E,0xE9,0xC2,0xA7,0x49,
0xDC,0x8D,0x81,0xE8,0x15,0x51,0x4A,0xF1,0x7C,0xAA,0x57,0xE9,0xB3,0x1D,0x29,0x08,
0xC1,0x8F,0x6F,0xD5,0x2E,0x06,0xA9,0x79,0x42,0x30,0xAA,0x32,0x00,0x6B,0x67,0xAA,
0xCA,0x7F,0x68,0xA0,0x50,0xA1,0xC1,0x3A,0x19,0x34,0x7B,0x28,0x9A,0x21,0x18,0x04,
0x0E,0xE4,0xAA,0x28,0x8E,0xEA,0x24,0x17,0xF1,0xF1,0xC4,0x67,0xC0,0xD7,0x1D,0xB2,
0x79,0x6A,0xA0,0xFD,0x49,0x75,0x8A,0xA8,0xF5,0xC0,0xA3,0xDA,0x4B,0xA9,0x41,0xE9,
0xAB,0xD4,0x0A,0x17,0x61,0x8A,0x71,0xF5,0xAA,0x1E,0xB8,0x60,0xF2,0x66,0xD0,0xF3,
0x47,0x8F,0xCE,0x88,0xED,0x32,0xE8,0xF9,0xB2,0x4F,0x45,0x6D,0xAE,0x0D,0x7B,0x26,
0x80,0x5A,0x39,0x7B,0xDE,0x49,0x53,0x21,0xF8,0xA1,0x1A,0xDA,0xA0,0x44,0x24,0x33,
0xCD,0x6C,0x47,0x62,0xEB,0x7D,0x43,0xA6,0x2F,0xB4,0xF3,0x68,0x33,0xD5,0x03,0x72,
0x1E,0xC2,0xDF,0x2E,0xF1,0x5B,0xE2,0xA4,0x47,0x3E,0xA9,0x62,0x1A,0x93,0x77,0x9D,
0x7C,0x1B,0x6B,0x70,0x56,0x3E,0xA7,0x30,0x66,0x38,0xD3,0xBB,0xEE,0x8E,0x62,0x6B,
0xE5,0x92,0x76,0x34,0x3E,0xC9,0x5A,0xD5,0x56,0xA7,0x44,0x79,0x07,0xE4,0x83,0x48,
0xE3,0x5C,0x7C,0xEC,0x74,0x52,0x34,0x93,0x4B,0x66,0x43,0x69,0x8C,0x4D,0xCB,0x13,
0x13,0xC4,0xE8,0x1D,0x4D,0xE3,0x1F,0x9F,0xFF,0x2B,0x62,0x35,0x92,0xE5,0xD6,0x00,
0x77,0x46,0xF3,0xD5,0x0D,0xC1,0xAA,0x6C,0xD7,0xF6,0xA6,0x10,0x27,0x89,0x69,0xEB,
0x8F,0x47,0x88,0xC0,0x67,0x4F,0x2C,0x56,0x89,0x5C,0x95,0x45,0xE5,0x8C,0xC8,0x21,
0x7F,0x52,0xA7,0x08,0x1E,0xCD,0x11,0x08,0xA6,0x1D,0x6F,0xCB,0x8E,0x44,0xD7,0x7C,
0x0A,0xDB,0x52,0x3E,0xC2,0xF6,0x05,0xC2,0x70,0xEA,0x54,0x94,0x4E,0x7E,0xF1,0x31,
0x3B,0xE3,0x65,0x44,0x4D,0xF1,0x0C,0xE4,0x7A,0xEF,0x2B,0xF2,0x47,0x29,0xD0,0x68,
0x50,0x19,0x9C,0xFA,0x5C,0xBF,0xC9,0x4A,0xB4,0x95,0xB3,0xA7,0xC0,0x01,0x07,0x54,
0x93,0x57,0xF7,0x1D,0x33,0x55,0xA5,0x14,0x31,0x1C,0xB6,0x63,0x0A,0xBC,0x4D,0x38,
0xD4,0xF5,0x41,0x94,0xA7,0x3D,0xE0,0x46,0x45,0xE4,0xC0,0x81,0x40,0x24,0x9D,0x04,
0x30,0xC0,0xF1,0x69,0x44,0x45,0xFF,0x30,0xCF,0xD0,0xF4,0x8D,0x8C,0x62,0x7E,0x14,
0xA2,0xB0,0xF4,0x40,0x75,0x4B,0x25,0xFF,0x11,0x12,0x87,0xCD,0x57,0x1E,0x19,0xA5,
0x44,0xAB,0x03,0x68,0x80,0x83,0xEB,0xD4,0xD6,0x1D,0x92,0x9A,0x9D,0x44,0x19,0x05,
0x19,0xAE,0x31,0x4F,0x16,0xDA,0x79,0xB8,0xEF,0x1B,0x2B,0x8B,0x00,0xCD,0x25,0x36,
0x25,0xA2,0xAD,0xAA,0x43,0xB9,0x98,0xB0,0xE2,0x5C,0x19,0x66,0xE9,0x9E,0xDB,0x03,
0x0B,0x59,0x6B,0x28,0x87,0x68,0x50,0x2C,0x4C,0xFF,0xA1,0x2A,0x27,0x02,0xEB,0x45,
0xDD,0xFA,0x6D,0xF3,0x34,0x12,0x49,0x0D,0xEC,0xC0,0x11,0x19,0xA4,0x13,0xFC,0x64,
0x9F,0x7B,0xE0,0xFE,0xBF,0xE0,0xC0,0x82,0x72,0xEB,0x3C,0x11,0xED,0x9E,0x29,0x10,
0xDF,0x19,0x2E,0x9D,0x96,0xC8,0x97,0x49,0xB9,0xDC,0x4E,0x28,0x29,0x47,0x65,0xF3,
0x2F,0x52,0x5C,0xEB,0xB9,0x67,0x17,0x94,0xCB,0xB3,0xA9,0xD5,0x06,0x2F,0x90,0x46,
0x3D,0xB9,0xEF,0xFC,0xA4,0x7D,0x6D,0x0F,0xB4,0x87,0xC9,0x7B,0x31,0x32,0xDA,0xC6,
0x4B,0xBD,0x41,0xF0,0x22,0xEF,0x59,0x11,0x7D,0xCF,0xCE,0x3E,0x5D,0xA1,0x9E,0xDF,
0x1F,0x4F,0xBB,0xA7,0xE3,0xD1,0x1E,0x5A,0x46,0xB9,0xC5,0x62,0xA5,0x69,0xF5,0xE6,
0x50,0xB4,0x86,0xB9,0x30,0xC8,0x8D,0xF4,0x43,0xAA,0x84,0x11,0x36,0xF1,0x69,0x6E,
0x34,0x8A,0x3D,0x45,0xBC,0xCD,0xDF,0x11,0x12,0xE8,0x1D,0x05,0xFA,0xC2,0xBD,0xB8,
0x82,0xA1,0x95,0xFB,0x03,0x92,0x24,0xD7,0x48,0x7E,0xC1,0x58,0xBF,0x02,0xD0,0x7C,
0xE0,0xB1,0x86,0x69,0x6D,0x51,0x38,0x82,0x0A,0x9C,0x99,0xCF,0xF5,0x10,0x20,0x85,
0xA8,0x21,0x14,0x2A,0x9B,0xCC,0x3B,0x94,0x42,0xFA,0x5E,0xE3,0xB2,0xF0,0xED,0x72,
0x82,0xC6,0x6C,0x3D,0xF5,0xBC,0xAF,0x94,0xEC,0xD9,0xDC,0x42,0xA8,0x5B,0x6A,0x84,
0xF2,0x99,0xA8,0x2C,0x74,0xBF,0x9B,0x5D,0x3F,0x4C,0xED,0x40,0x49,0x29,0x9A,0xCB,
0xA6,0xFA,0x4D,0x7C,0x77,0x6F,0xB9,0xED,0x82,0x4B,0x2E,0x38,0x97,0x55,0x3A,0x64,
0xF9,0xB8,0x19,0xC4,0xAD,0x8C,0xE3,0x0C,0x81,0x98,0xAC,0x6C,0x46,0xE7,0x52,0x59,
0x71,0x68,0x22,0x19,0xE8,0xA3,0x43,0x2C,0xDD,0x13,0x92,0x25,0xA6,0xF7,0x76,0xB7,
0x7F,0xC4,0x05,0x46,0xA2,0xDF,0xF6,0x37,0x51,0x70,0xFE,0xEE,0xD6,0xDD,0x33,0xDC,
0x0F,0xB4,0xA3,0x39,0x36,0x3A,0x9E,0x0E,0x6F,0x52,0x67,0x4E,0xF5,0xC7,0x19,0x28,
0xCA,0x2E,0x8A,0x2E,0xDD,0xED,0xF6,0xC4,0xA6,0xFC,0xFB,0xEE,0x5B,0x2C,0xEB,0x5D,
0x09,0x26,0x05,0x66,0xBB,0x1B,0x50,0x5A,0xBD,0xE8,0xC0,0x74,0xDC,0xC5,0xC4,0x3F,
0x67,0xC7,0x90,0x4E,0xFC,0x5A,0x8B,0xAD,0x0C,0x65,0xF9,0xF6,0xFA,0x42,0xBA,0x12,
0x00,0xA8,0x47,0x7E,0x18,0x24,0x0B,0x7B,0xFD,0x70,0x2E,0x57,0xFA,0xEF,0x64,0x1F,
0x4E,0x46,0xBE,0xE8,0x1B,0xD0,0xB4,0x1C,0xB5,0x0A,0xD7,0xC1,0x17,0x19,0xE6,0xF1,
0x26,0xF0,0x1F,0x0B,0x45,0xB0,0x0A,0x90,0x35,0xEB,0xCA,0x16,0x66,0x26,0x7C,0x28,
0x7B,0xE7,0xB5,0x62,0x60,0x09,0xC2,0x40,0x15,0xC6,0x1B,0x58,0x82,0xB5,0x0D,0xB3,
0x14,0x88,0x35,0x6E,0xEE,0xE0,0x59,0xED,0xF5,0xA3,0xEE,0x1B,0x89,0x5B,0x24,0xC5,
0x77,0xE6,0x3A,0x51,0xA6,0x55,0xE5,0xC2,0xCA,0xDF,0xD4,0x7C,0xE5,0x37,0xB1,0xCA,
0x9E,0x76,0xF9,0x21,0x00,0x8F,0x9D,0x3C,0xF0,0xC1,0x81,0xA7,0xAC,0x12,0xD4,0xFD,
0xB5,0xC4,0xFC,0x09,0x85,0x3E,0x16,0x3F,0x53,0xCD,0x67,0xFF,0x95,0xFC,0x4F,0xEC,
0xF6,0x00,0xE7,0x45,0x74,0x2D,0x4E,0x96,0xB1,0x55,0xC8,0x4E,0x96,0x80,0x23,0xB8,
0x80,0x39,0xBA,0xF3,0xCA,0x62,0x04,0x18,0xC6,0x85,0x08,0x32,0x55,0x2F,0x3F,0xB6,
0x2E,0xAF,0x73,0x9A,0xFC,0xB9,0x9C,0xDD,0x8D,0x5A,0xCD,0xBD,0x4B,0x95,0x2A,0xA1,
0xB3,0x4B,0x4A,0xB5,0x38,0xB2,0x8B,0x54,0x04,0xF8,0xA7,0xF4,0x57,0x71,0x05,0x67,
0x4C,0x0A,0x26,0xED,0x22,0xDD,0x9B,0x21,0x40,0x84,0xC3,0x82,0x08,0x8B,0x0B,0xBC,
0x62,0x45,0x7C,0xDE,0x3E,0xA0,0x10,0x5F,0x31,0x61,0xC5,0xAD,0x32,0xB6,0x6F,0x09,
0x6C,0x90,0x2C,0x7F,0xED,0xB1,0x07,0x9F,0xAF,0x43,0x39,0x7F,0x11,0xAE,0x27,0x5C,
0xE4,0x33,0x63,0xDD,0xED,0x95,0x22,0x5D,0xFE,0xE1,0x9D,0xC1,0x7F,0x67,0xF5,0x8F,
0x24,0x76,0x93,0x1C,0xA1,0x13,0x4F,0xC4,0x2C,0xD4,0x07,0x0B,0xCA,0xE8,0x0B,0x81,
0x5F,0x54,0x96,0x5A,0x66,0xC1,0x2A,0xEA,0xDD,0x38,0xAD,0xD6,0x0B,0x4D,0x21,0x71,
0xBB,0x08,0xC8,0x9C,0x4F,0x24,0x93,0x0F,0xBF,0x7B,0x5E,0x41,0x5F,0x3D,0x7D,0xA0,
0x81,0x8E,0xEA,0x40,0xD4,0x9F,0x85,0x3A,0xA8,0x67,0xAD,0x6C,0xAB,0x96,0xC1,0x34,
0x50,0xEF,0x67,0xF7,0x78,0x98,0x6E,0xB9,0x5C,0xBA,0x8B,0x00,0xB1,0x2C,0x89,0xA5,
0x7E,0x8D,0x89,0x27,0x3C,0xDC,0x20,0xB2,0x2B,0x2C,0x08,0xC5,0x52,0x24,0xB2,0xAC,
0x5E,0x81,0x53,0x52,0x14,0x07,0x11,0x84,0xD7,0x83,0xC7,0x5F,0x1B,0x65,0x68,0xBA,
0x6A,0xC0,0xF1,0x40,0xCB,0xA3,0x08,0xBD,0xE3,0x3C,0x81,0xCA,0x18,0x79,0xAD,0xB8,
0x1B,0xDB,0xE2,0xE2,0x73,0xEC,0x58,0xA0,0x6E,0x16,0xAF,0x7C,0x7B,0xB7,0x57,0xC6,
0xC0,0x20,0xA8,0xC6,0x9B,0x70,0x07,0xDC,0x5E,0xE2,0xD5,0xB3,0x64,0xAE,0x7B,0x96,
0x54,0x61,0xC2,0x01,0xA0,0x9A,0xDD,0x34,0x6D,0x23,0x7A,0x92,0x9A,0x9D,0x53,0xD8,
0x53,0x27,0x51,0x95,0xAB,0x38,0x11,0x0E,0x69,0xF8,0xB0,0xE7,0xFD,0x5B,0xC6,0x7D,
0x01,0x2C,0x37,0x17,0xE4,0xFF,0x6A,0xFC,0x87,0xBA,0x1C,0x19,0x8E,0x76,0x0F,0xC9,
0x07,0x2C,0x44,0x1B,0x76,0x0D,0xF6,0x77,0x62,0x12,0x9A,0x68,0x53,0x10,0xF0,0xF6,
0xB0,0xCC,0x83,0xC0,0x63,0xEA,0x40,0x2E,0xD5,0x81,0xBC,0x0D,0x11,0x53,0xB1,0xBB,
0xCB,0x01,0xD0,0x5B,0x8C,0x64,0xBB,0x25,0x63,0x2D,0xE2,0x45,0xDC,0x00,0x92,0x58,
0x0A,0xB1,0x74,0x4B,0xA1,0x5D,0x09,0x83,0x2C,0xDA,0xD9,0xF1,0x5D,0x3D,0x6C,0x3F,
0x57,0x25,0xC4,0x8F,0x65,0xE1,0xAF,0xA4,0x6A,0x3E,0x41,0x3A,0x59,0x3D,0xFE,0x19,
0x91,0x34,0x59,0x8D,0xBC,0xD8,0x99,0xC4,0xD5,0x58,0xD2,0xAC,0x7F,0x7E,0x11,0x32,
0x94,0xA4,0x87,0xED,0xE8,0x9D,0x8A,0xFB,0x49,0xBA,0x3F,0xF0,0x26,0x5B,0x58,0x15,
0xEF,0x97,0x97,0x76,0x27,0x5E,0xD7,0x8C,0x7A,0xFA,0xBD,0xB6,0x8D,0x7D,0x09,0x9B,
0x77,0xA6,0xA0,0xA4,0x62,0xC1,0xF6,0x89,0x30,0xB0,0x5F,0x94,0xF3,0xF9,0xDA,0xF2,
0xB4,0x1B,0x14,0x75,0xBB,0x4B,0x34,0x0A,0x4C,0x96,0x31,0xBC,0xB3,0x14,0x9C,0xBC,
0x41,0xC3,0x08,0x1B,0x11,0x4C,0xF9,0x39,0x55,0xFF,0x5F,0xCA,0x69,0x5C,0x67,0x74,
0x16,0x2D,0x94,0x5F,0x12,0x36,0x7B,0xC9,0x7D,0x8A,0xFD,0x92,0x24,0x86,0x6D,0x0D,
0xAC,0x12,0xEB,0x5C,0x95,0x7E,0x61,0xC8,0xCC,0xFD,0xD2,0x92,0x97,0xAF,0x22,0x34,
0x3F,0x4D,0xB4,0xFE,0x62,0xE1,0x56,0x1E,0x4C,0x3F,0x2E,0x17,0xED,0x30,0x23,0xB3,
0xF7,0x82,0x95,0xC8,0x41,0x56,0x65,0x54,0xEE,0x11,0x26,0x3D,0x71,0xD1,0xF3,0x57,
0xD4,0x8B,0xC8,0x11,0x9D,0xFF,0x9E,0xB4,0xDC,0xAB,0x9B,0x06,0x5D,0x21,0x86,0x20,
0x5E,0xB9,0xEC,0x3E,0xE8,0x43,0xAD,0x66,0x6D,0x52,0x78,0x9A,0xFE,0xAE,0x28,0x57,
0xFB,0x38,0x5D,0xA8,0x26,0x0D,0x62,0xDC,0x31,0x41,0xF9,0x27,0x40,0x48,0x95,0x42,
0x9F,0x8A,0xA6,0x66,0x17,0x0D,0x17,0xC5,0x71,0x42,0xD2,0x5F,0xA2,0xBF,0x53,0x09,
0xFA,0x03,0x6E,0x9D,0xEF,0xD4,0x17,0x29,0x62,0xD9,0xC5,0x9B,0x5A,0xBF,0x50,0xD4,
0x96,0x17,0xF5,0x1C,0xF9,0xDF,0xC1,0xDA,0x08,0x64,0x62,0xF2,0xA6,0xAD,0x42,0x80,
0xD0,0xD5,0x35,0x70,0xA8,0xFE,0xB5,0x05,0xFA,0x69,0x72,0xCD,0xD9,0xB7,0x0E,0x2E], np.byte)

    graphicscomputer = AESTest()
    result_gpu_naive = graphicscomputer.AES_gpu(byte_array_in, byte_array_key, byte_array_in.size, "naive")[0]
    assert np.array_equal(result_gpu_naive, byte_array_ref)
    result_gpu_shared = graphicscomputer.AES_gpu(byte_array_in, byte_array_key, byte_array_in.size, "shared")[0]
    assert np.array_equal(result_gpu_shared, byte_array_ref)
    result_gpu_shared_coalesced = graphicscomputer.AES_gpu(byte_array_in, byte_array_key, byte_array_in.size, "shared_coalesced")[0]
    assert np.array_equal(result_gpu_shared_coalesced, byte_array_ref)
    result_gpu_shared_coalesced_noconst = graphicscomputer.AES_gpu(byte_array_in, byte_array_key, byte_array_in.size, "shared_coalesced_noconst")[0]
    assert np.array_equal(result_gpu_shared_coalesced_noconst, byte_array_ref)
    result_gpu_private = graphicscomputer.AES_gpu(byte_array_in, byte_array_key, byte_array_in.size, "private")[0]
    assert np.array_equal(result_gpu_private, byte_array_ref)

# Measure timing for different sizes of messages
if __name__ == "__main__":
    # Test sizes
    test_sizes = [16, 64, 256, 1024, 4096, 16384, 65536, 262144, 1048576, 4194304, 16777216, 67108864]

    # Create an instance of the AESTest class
    graphicscomputer = AESTest()
    # Create AES_Python instance
    aes_cpu = AES_Python()

    # Define the number of iterations
    nr_iterations = 10

    times_gpu_naive = []
    times_gpu_shared = []
    times_gpu_shared_coalesced = []
    times_gpu_shared_coalesced_noconst = []
    times_private = []
    times_private_sharedlut = []
    times_cpu = []

    for test_size in tqdm(test_sizes):
        # Get test input for this case
        file = open(f"test_cases/test_case_{test_size}.txt", "r")
        hex_in = file.read()
        file.close()
        byte_in = bytes.fromhex(hex_in)
        byte_array_in = np.frombuffer(byte_in, dtype=np.byte)

        # Get test key
        hex_key = "000102030405060708090a0b0c0d0e0f"
        byte_key = bytes.fromhex(hex_key)
        byte_array_key = np.frombuffer(byte_key, dtype=np.byte)

        times_gpu_naive_it = []
        times_gpu_shared_it = []
        times_gpu_shared_coalesced_it = []
        times_gpu_shared_coalesced_noconst_it = []
        times_cpu_it = []
        times_private_sharedlut_it = []
        times_private_it = []

        for iteration in range(nr_iterations):
            time_gpu_naive = graphicscomputer.AES_gpu(byte_array_in, byte_array_key, byte_array_in.size, "naive")[1]
            time_gpu_shared = graphicscomputer.AES_gpu(byte_array_in, byte_array_key, byte_array_in.size, "shared")[1]
            time_gpu_shared_coalesced = graphicscomputer.AES_gpu(byte_array_in, byte_array_key, byte_array_in.size, "shared_coalesced")[1]
            time_gpu_shared_coalesced_noconst = graphicscomputer.AES_gpu(byte_array_in, byte_array_key, byte_array_in.size, "shared_coalesced_noconst")[1]
            time_private = graphicscomputer.AES_gpu(byte_array_in, byte_array_key, byte_array_in.size, "private")[1]
            time_private_sharedlut = graphicscomputer.AES_gpu(byte_array_in, byte_array_key, byte_array_in.size, "private_sharedlut")[1]
            time_cpu = aes_cpu.encrypt(hex_in, hex_key)[1]

            times_gpu_naive_it.append(time_gpu_naive)
            times_gpu_shared_it.append(time_gpu_shared)
            times_gpu_shared_coalesced_it.append(time_gpu_shared_coalesced)
            times_gpu_shared_coalesced_noconst_it.append(time_gpu_shared_coalesced_noconst)
            times_private_it.append(time_private)
            times_private_sharedlut_it.append(time_private_sharedlut)
            times_cpu_it.append(time_cpu)
        
        times_gpu_naive.append(sum(times_gpu_naive_it)/len(times_gpu_naive_it))
        times_gpu_shared.append(sum(times_gpu_shared_it)/len(times_gpu_shared_it))
        times_gpu_shared_coalesced.append(sum(times_gpu_shared_coalesced_it)/len(times_gpu_shared_coalesced_it))
        times_gpu_shared_coalesced_noconst.append(sum(times_gpu_shared_coalesced_noconst_it)/len(times_gpu_shared_coalesced_noconst_it))
        times_private.append(sum(times_private_it)/len(times_private_it))
        times_private_sharedlut.append(sum(times_private_sharedlut_it)/len(times_private_sharedlut_it))
        times_cpu.append(sum(times_cpu_it)/len(times_cpu_it))

    print('GPU (naive) execution times:\n', times_gpu_naive)
    print('GPU (shared) execution times:\n', times_gpu_shared)
    print('GPU (shared & coalesced) execution times:\n', times_gpu_shared_coalesced)
    print('GPU (shared & coalesced, no constant mem) execution times:\n', times_gpu_shared_coalesced_noconst)
    print('GPU (state in private memory) execution times:\n', times_private)
    print('GPU (state in private mem, luts in shared) execution times: \n', times_private_sharedlut)
    print('CPU execution times:\n', times_cpu)
